/*
This class is simply used to turn the resulting
data files into csv files for easy graphing when
there is no gui to work with.
R-Studio works excellent for graphing csv files.
*/


import java.io.*;

public class TestClass
{

    //=====================================================
    /*
    There are several variables to modify based on the files
    you wish to read and write. It has been modified to write
    three resulting csv files at a time for convenience.
    Be careful not to make numberOfLineInRawFile larger than
    the number of lines in the raw file, but also don't make
    numberOfLinesInRawFile + numberOfLinesAveraged larger than
    the number of lines in the raw file either.

    The noiseThreshold only effects MPU9250 accelerations
    in the programs current state.

    xValue and yValue do not have anything to do with the raw
    data's x,y,z formatting. They only represent the resulting
    graph's x axis and y axis, or anther way to put that,
    the first and second value on a .dat file line.
    */
    //=====================================================
    public static void main(String[] args)
    {

    String rawFileName;
    String dataFileName_x;
    String dataFileName_y;
    String dataFileName_z;
    String outputFileName_x;
    String outputFileName_y;
    String outputFileName_z;
    int numberOfLinesInRawFile;
    int numberOfLinesAveraged;
    double noiseThreshold;


    rawFileName = new String("LOG00003.txt");

    dataFileName_x = new String("LOG00003_ADXL377_TxA_x.dat");
    dataFileName_y = new String("LOG00003_ADXL377_TxA_y.dat");
    dataFileName_z = new String("LOG00003_ADXL377_TxA_z.dat");

    outputFileName_x = new String("results_x.csv");
    outputFileName_y = new String("results_y.csv");
    outputFileName_z = new String("results_z.csv");

    numberOfLinesInRawFile = 3300;

    numberOfLinesAveraged = 10;

    noiseThreshold = 0.01;


    new Calculator(rawFileName, numberOfLinesAveraged, noiseThreshold);


    readAndWriteOrderedPair(dataFileName_x,
                            dataFileName_y,
                            dataFileName_z,
                            outputFileName_x,
                            outputFileName_y,
                            outputFileName_z,
                            numberOfLinesInRawFile);
                                                                //used to test read OrderedPairs from
                                                                //.dat files generated by Calculator
                                                                //and create a results.csv file for
                                                                //easy visualization.

    }
    //=====================================================
    private static void readAndWriteOrderedPair(String dataFileName_x,
                                                String dataFileName_y,
                                                String dataFileName_z,
                                                String outputFileName_x,
                                                String outputFileName_y,
                                                String outputFileName_z,
                                                int numberOfLinesInRawFile)
    {

    OrderedPair op;
    FileInputStream fis;
    FileOutputStream fos;
    ObjectInputStream ois;
    PrintWriter pr;

    try
        {

        fis = new FileInputStream(dataFileName_x);

        fos = new FileOutputStream(outputFileName_x);

        ois = new ObjectInputStream(fis);
        pr = new PrintWriter(fos);

        for (int i=0; i < numberOfLinesInRawFile; i++)
            {
            op = new OrderedPair();

            op.readOrderedPair(ois);

            pr.print(op.xValue);
            pr.print(",");
            pr.print(op.yValue);
            pr.print("\n");
            }

        pr.flush();

        fis = new FileInputStream(dataFileName_y);

        fos = new FileOutputStream(outputFileName_y);

        ois = new ObjectInputStream(fis);
        pr = new PrintWriter(fos);

        for (int i=0; i < numberOfLinesInRawFile; i++)
            {
            op = new OrderedPair();

            op.readOrderedPair(ois);

            pr.print(op.xValue);
            pr.print(",");
            pr.print(op.yValue);
            pr.print("\n");
            }

        pr.flush();

        fis = new FileInputStream(dataFileName_z);

        fos = new FileOutputStream(outputFileName_z);

        ois = new ObjectInputStream(fis);
        pr = new PrintWriter(fos);

        for (int i=0; i < numberOfLinesInRawFile; i++)
            {
            op = new OrderedPair();

            op.readOrderedPair(ois);

            pr.print(op.xValue);
            pr.print(",");
            pr.print(op.yValue);
            pr.print("\n");
            }

        pr.flush();

        }
    catch (IOException ioe)
        {
        ioe.printStackTrace();
        }

    }
    //=====================================================


}